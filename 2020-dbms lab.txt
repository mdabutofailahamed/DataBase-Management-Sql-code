
CREATE TABLE employee
(
    Name varchar(45) NOT NULL,
    Occupation varchar(35) NOT NULL, 
    Joining_Date Date,
    Working_Hour varchar(10)
);
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
INSERT INTO employee (Name,Occupation,Joining_Date,Working_Hour)
VALUES
("Robin","Scientist", '2020-10-04',12),
("Warner","Engineer", '2020-10-04',13),
("Peter","Actor", '2020-10-04',13),
("Marco","Doctor", '2020-10-04',14);
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
UPDATE employee
SET Name = 'Abu Tofail', Occupation= 'Teacher'
WHERE Occupation = 'Doctor';
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DELETE FROM employee WHERE Name='Peter';
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DROP TABLE employee;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ALTER TABLE employee
DROP COLUMN Joining_Date;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
https://www.javatpoint.com/mysql-create-trigger
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CREATE TRIGGER trigger_name  trigger_time trigger_event  
ON table_name FOR EACH ROW  
BEGIN  
    --variable declarations  
    --trigger code  
END; 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
 DELIMITER //  
 Create Trigger before_insert_empworkinghours   
BEFORE INSERT ON employee FOR EACH ROW  
BEGIN  
IF NEW.working_hours < 0 THEN SET NEW.working_hours = 0;  
END IF;  
END //  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DELIMITER // 
 Create Trigger before_insert_empworkinghours   
BEFORE INSERT ON employee FOR EACH ROW  
BEGIN  

IF NEW.Working_Hour < 0 THEN SET NEW.Working_Hour = 0;  
END IF;  
END //  

******Example-2
*****************
CREATE TABLE student_info (  
  stud_id int NOT NULL,  
  stud_code varchar(15) DEFAULT NULL,  
  stud_name varchar(35) DEFAULT NULL,  
  subject varchar(25) DEFAULT NULL,  
  marks int DEFAULT NULL,  
  phone varchar(15) DEFAULT NULL,  
  PRIMARY KEY (stud_id)  
)  

CREATE TABLE student_detail (  
  stud_id int NOT NULL,  
  stud_code varchar(15) DEFAULT NULL,  
  stud_name varchar(35) DEFAULT NULL,  
  subject varchar(25) DEFAULT NULL,  
  marks int DEFAULT NULL,  
  phone varchar(15) DEFAULT NULL,  
  Lasinserted Time,  
  PRIMARY KEY (stud_id)  
);  

DELIMITER //  
 Create Trigger after_insert_details  
AFTER INSERT ON student_info FOR EACH ROW  
BEGIN  
INSERT INTO student_detail VALUES (new.stud_id, new.stud_code,   
new.stud_name, new.subject, new.marks, new.phone, CURTIME());  
END //  

 INSERT INTO student_info VALUES   
(10, 110, 'Alexandar', 'Biology', 67, '2347346438');  
>>>>>>>>>>>>>>>.>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SELECT * FROM student_detail;  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
****Example-3:BEFTER UPDATE Trigger Example
****************
CREATE TABLE sales_info (  
    id INT AUTO_INCREMENT,  
    product VARCHAR(100) NOT NULL,  
    quantity INT NOT NULL DEFAULT 0,  
    fiscalYear SMALLINT NOT NULL,  
    CHECK(fiscalYear BETWEEN 2000 and 2050),  
    CHECK (quantity >=0),  
    UNIQUE(product, fiscalYear),  
    PRIMARY KEY(id)  
);  
INSERT INTO sales_info(product, quantity, fiscalYear)  
VALUES  
    ('2003 Maruti Suzuki',110, 2020),  
    ('2015 Avenger', 120,2020),  
    ('2018 Honda Shine', 150,2020),  
    ('2014 Apache', 150,2020);  
>>>>>>>>>>>.>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
///Tigger start
>>>>>>>>>>>>>>>>>>>
DELIMITER $$  
  
CREATE TRIGGER before_update_salesInfo  
BEFORE UPDATE  
ON sales_info FOR EACH ROW  
BEGIN  
    DECLARE error_msg VARCHAR(255);  
    SET error_msg = ('The new quantity cannot be greater than 2 times the current quantity');  
    IF new.quantity > old.quantity * 2 THEN  
    SIGNAL SQLSTATE '45000'   
    SET MESSAGE_TEXT = error_msg;  
    END IF;  
END $$  
  
DELIMITER ;  

 UPDATE sales_info SET quantity = 125 WHERE id = 2;   
 UPDATE sales_info SET quantity = 600 WHERE id = 2;
  
**Example-4:AFTER UPDATE Trigger Example
***********
 CREATE TABLE students(    
    id int NOT NULL AUTO_INCREMENT,    
    name varchar(45) NOT NULL,    
    class int NOT NULL,    
    email_id varchar(65) NOT NULL,    
    PRIMARY KEY (id)    
);  

INSERT INTO students (name, class, email_id)     
VALUES ('Stephen', 6, 'stephen@javatpoint.com'),   
('Bob', 7, 'bob@javatpoint.com'),   
('Steven', 8, 'steven@javatpoint.com'),   
('Alexandar', 7, 'alexandar@javatpoint.com');  


CREATE TABLE students_log(    
    user varchar(45) NOT NULL,    
    descreptions varchar(65) NOT NULL  
);  

DELIMITER $$  
  
CREATE TRIGGER after_update_studentsInfo  
AFTER UPDATE  
ON students FOR EACH ROW  
BEGIN  
    INSERT into students_log VALUES (user(),   
    CONCAT('Update Student Record ', OLD.name, ' Previous Class :',  
    OLD.class, ' Present Class ', NEW.class));  
END $$  
  
DELIMITER ;  

 UPDATE students SET class = class + 1; 

select* from student;
select* from students_log;

***Example-5  :BEFORE DELETE Trigger Example
**************

CREATE TABLE salaries (  
    emp_num INT PRIMARY KEY,  
    valid_from DATE NOT NULL,  
    amount DEC(8 , 2 ) NOT NULL DEFAULT 0  
);  

INSERT INTO salaries (emp_num, valid_from, amount)  
VALUES  
    (102, '2020-01-10', 45000),  
    (103, '2020-01-10', 65000),  
    (105, '2020-01-10', 55000),  
    (107, '2020-01-10', 70000),  
    (109, '2020-01-10', 40000);  

CREATE TABLE salary_archives (  
    id INT PRIMARY KEY AUTO_INCREMENT,  
    emp_num INT,  
    valid_from DATE NOT NULL,  
    amount DEC(18 , 2 ) NOT NULL DEFAULT 0,  
    deleted_time TIMESTAMP DEFAULT NOW()  
);

DELIMITER $$  
  
CREATE TRIGGER before_delete_salaries  
BEFORE DELETE  
ON salaries FOR EACH ROW  
BEGIN  
    INSERT INTO salary_archives (emp_num, valid_from, amount)  
    VALUES(OLD. emp_num, OLD.valid_from, OLD.amount);  
END$$   
  
DELIMITER ;  

 DELETE FROM salaries WHERE emp_num = 105; 

 SELECT * FROM salary_archives;  
DELETE FROM salaries;  
SELECT * FROM salary_archives;  
**Example-6: AFTER DELETE Trigger
************************************
CREATE TABLE salaries (  
    emp_num INT PRIMARY KEY,  
    valid_from DATE NOT NULL,  
    amount DEC(8 , 2 ) NOT NULL DEFAULT 0  
);  
INSERT INTO salaries (emp_num, valid_from, amount)  
VALUES  
    (102, '2020-01-10', 45000),  
    (103, '2020-01-10', 65000),  
    (105, '2020-01-10', 55000),  
    (107, '2020-01-10', 70000),  
    (109, '2020-01-10', 40000);  
select* from salaries;

CREATE TABLE total_salary_budget(  
    total_budget DECIMAL(10,2) NOT NULL  
);

INSERT INTO total_salary_budget (total_budget)  
SELECT SUM(amount) FROM salaries;  
select* from  total_salary_budget;

DELIMITER $$  
  
CREATE TRIGGER after_delete_salaries  
AFTER DELETE  
ON salaries FOR EACH ROW  
BEGIN  
   UPDATE total_salary_budget SET total_budget = total_budget - old.amount;  
END$$   
  
DELIMITER ;  

 DELETE FROM salaries WHERE emp_num = 105;  
 SELECT * FROM total_salary_budget;  
 DELETE FROM salaries;  
SELECT * FROM total_salary_budget;  


example-7
************
CREATE TABLE Table1
(
 Roll int(10) NOT NULL Primary Key,
 Name varchar(45) NOT NULL, 
 Department varchar(35) NOT NULL,
 Balance double(10,2),
 Grade varchar(10) 
);
INSERT INTO table1 (Roll,Name,Department, Balance,Grade)
VALUES
(10101,'Bikash', 'CSE',220.25, 'A'),
(10201,'Josh', 'ICE',340.70, 'B+'),
(10301,'Kevin', 'EEE',360.00, 'B-'),
(10401,'Ben', 'ICE',560.16, 'C'),
(10102,'Karim', 'CSE',255.98,'B')

RENAME TABLE table1 to Science;

UPDATE science 
SET Balance = Balance + (Balance * 10/100);

SELECT AVG(Balance) AS Average_Balance_of_CSE
FROM Science
WHERE Department='CSE';

SELECT AVG(Balance) AS Average_Balance_of_ICE
FROM Science
WHERE Department='ICE';

SELECT AVG(Balance) AS Average_Balance_of_EEE
FROM Science
WHERE Department='EEE';

UPDATE Science SET Balance=Balance+(Balance*.1);
INSERT INTO account (Account_id, Name)
VALUES
(17,'Bikash'),
(21,'Josh'),
(25,'Kevin'),
(78,'Ben'),
(96,'Karim')

CREATE TABLE Borrower( Loan_id int, Name varchar(25) );
INSERT INTO borrower (Loan_id, Name)
VALUES
(103,'Karim'),
(106,'Badol'),
(112,'Jamal'),
(110,'Bikash'),
(109,'Rarim')

(select Name from account)union(select Name from borrower)

select branch_name,
avg (balance)
from account
group by branch_name
having avg (balance) > 1200

1)Find all customers who have a loan, an account, or both:
(select customer_name from depositor)union(select customer_name from borrower)

2)   Find all customers who have both a loan and an account:
(select customer_name from depositor)intersect(select customer_name from borrower)

3) Find all customers who have an account but no loan.:

(select customer_name from depositor)except(select customer_name from borrower)



